
Communicate with PC using UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000019e  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006e  0080006e  00000240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e9  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ad  00000000  00000000  00000b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036c  00000000  00000000  000011b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012f  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001b31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  8a:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Receiver_Handler>:

//Functions definitions
void Receiver_Handler(void)
{
	//Flush UDR Buffer
	UART_Receive();
  92:	0e 94 c6 00 	call	0x18c	; 0x18c <UART_Receive>
	
	UART_Transmit_Char('H');
  96:	88 e4       	ldi	r24, 0x48	; 72
  98:	0e 94 b3 00 	call	0x166	; 0x166 <UART_Transmit_Char>
	UART_Transmit_Char('I');
  9c:	89 e4       	ldi	r24, 0x49	; 73
  9e:	0e 94 b3 00 	call	0x166	; 0x166 <UART_Transmit_Char>
  a2:	08 95       	ret

000000a4 <main>:

//Main Entry Point
int main(void)
{
    /* Initialize UART */
	USART_RXC_Callback(Receiver_Handler);
  a4:	89 e4       	ldi	r24, 0x49	; 73
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 c8 00 	call	0x190	; 0x190 <USART_RXC_Callback>
	UART_Init();
  ac:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Init>


	
	//Send greeting message to the User
	UART_Transmit_String(GreetingMessage);
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 b7 00 	call	0x16e	; 0x16e <UART_Transmit_String>
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x14>

000000ba <__vector_11>:

/*******************************************************************************
 *									ISRs	    	                           *
 *******************************************************************************/
ISR(USART_RXC_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	if (G_USART_RXC!='\0')
  dc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
  e0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
  e4:	89 2b       	or	r24, r25
  e6:	29 f0       	breq	.+10     	; 0xf2 <__vector_11+0x38>
	{
		(*G_USART_RXC)();
  e8:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
  ec:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
  f0:	09 95       	icall
	}
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	7f 91       	pop	r23
 100:	6f 91       	pop	r22
 102:	5f 91       	pop	r21
 104:	4f 91       	pop	r20
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <UART_Init>:
 *******************************************************************************/
 void UART_Init(void)
 {
	//Check for any kind of Interrupts are Enabled
	#if (UART_ReceiveInterrupt_Enable == 1)
		asm volatile ("CLI");	//cli();
 114:	f8 94       	cli
	//Begin initialization
	
	//all flags must be set to zero when the UCSRA is written
	//always write bit UDRE to zero when writing the UCSRA Register
	//The TXC Flag can be cleared by writing a one to its bit location.
	UCSRA =  0x40;
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	8b b9       	out	0x0b, r24	; 11
	
	//If URSEL is zero during a write operation, the UBRRH value will be updated.
	//If URSEL is one, the UCSRC setting will be updated.
	SET_BIT(UCSRC,URSEL);
 11a:	80 b5       	in	r24, 0x20	; 32
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	80 bd       	out	0x20, r24	; 32
	
	//Check for Selected mode
	#if (Asynchronous_Enable == 1)
		//Enable Asynchronous Operation
		CLR_BIT(UCSRC,UMSEL);
 120:	80 b5       	in	r24, 0x20	; 32
 122:	8f 7b       	andi	r24, 0xBF	; 191
 124:	80 bd       	out	0x20, r24	; 32
		
		//Disable Synchronous Clock
		CLR_BIT(UCSRC,UCPOL);
 126:	80 b5       	in	r24, 0x20	; 32
 128:	8e 7f       	andi	r24, 0xFE	; 254
 12a:	80 bd       	out	0x20, r24	; 32
	#endif
	
	//Select the Parity Mode
	#if (Parity_Mode == 0)
		//Disable Parity Mode
		CLR_BIT(UCSRC,UPM0);
 12c:	80 b5       	in	r24, 0x20	; 32
 12e:	8f 7e       	andi	r24, 0xEF	; 239
 130:	80 bd       	out	0x20, r24	; 32
		CLR_BIT(UCSRC,UPM1);
 132:	80 b5       	in	r24, 0x20	; 32
 134:	8f 7d       	andi	r24, 0xDF	; 223
 136:	80 bd       	out	0x20, r24	; 32
	
	#endif
	
	//Select the number of Stop Bits
	#if (StopBits_Select == 1)
		CLR_BIT(UCSRC,USBS);
 138:	80 b5       	in	r24, 0x20	; 32
 13a:	87 7f       	andi	r24, 0xF7	; 247
 13c:	80 bd       	out	0x20, r24	; 32
	//Select the Data size
	#if (DataSize == 5)
	#elif (DataSize == 6)
	#elif (DataSize == 7)
	#elif (DataSize == 8)
		SET_BIT(UCSRC,UCSZ0);
 13e:	80 b5       	in	r24, 0x20	; 32
 140:	82 60       	ori	r24, 0x02	; 2
 142:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRC,UCSZ1);
 144:	80 b5       	in	r24, 0x20	; 32
 146:	84 60       	ori	r24, 0x04	; 4
 148:	80 bd       	out	0x20, r24	; 32
		CLR_BIT(UCSRB,UCSZ2);
 14a:	52 98       	cbi	0x0a, 2	; 10
	
	#endif
	
	//If URSEL is zero during a write operation, the UBRRH value will be updated.
	//If URSEL is one, the UCSRC setting will be updated.
	CLR_BIT(UBRRH,URSEL);
 14c:	80 b5       	in	r24, 0x20	; 32
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	80 bd       	out	0x20, r24	; 32
	#if (DoubleSpeed_Enable == 1)
		UBRRH =	(UBRRH & 0xF0) | (((((F_CPU/8)/BaudRate)-1)>>8) & 0xF);
		UBRRL = (((F_CPU/8)/BaudRate)-1) & 0xFF;

	#elif (DoubleSpeed_Enable == 0)
		UBRRH =	(UBRRH & 0xF0) | (((((F_CPU/16)/BaudRate)-1)>>8) & 0xF);
 152:	80 b5       	in	r24, 0x20	; 32
 154:	80 7f       	andi	r24, 0xF0	; 240
 156:	80 bd       	out	0x20, r24	; 32
		UBRRL = (((F_CPU/16)/BaudRate)-1) & 0xFF;
 158:	87 e6       	ldi	r24, 0x67	; 103
 15a:	89 b9       	out	0x09, r24	; 9

	#endif
	
	//Handle Receiver
	#if (UART_Receive_Enable == 1)
		SET_BIT(UCSRB,RXEN);
 15c:	54 9a       	sbi	0x0a, 4	; 10
	#endif
	
	//Handle Transmitter
	#if (UART_Transmit_Enable == 1)
		SET_BIT(UCSRB,TXEN);
 15e:	53 9a       	sbi	0x0a, 3	; 10
	#endif
	
	//Handle Receiver Interrupt
	#if (UART_ReceiveInterrupt_Enable == 1)
	SET_BIT(UCSRB,RXCIE);
 160:	57 9a       	sbi	0x0a, 7	; 10
	asm volatile ("SEI");	//sei();
 162:	78 94       	sei
 164:	08 95       	ret

00000166 <UART_Transmit_Char>:
 }

void UART_Transmit_Char(u8 data)
{	
	/* Wait for empty transmit buffer */
	while (!GET_BIT(UCSRA,UDRE));
 166:	5d 9b       	sbis	0x0b, 5	; 11
 168:	fe cf       	rjmp	.-4      	; 0x166 <UART_Transmit_Char>
	
	/* Clear the TXC flag */
	//SET_BIT(UCSRA,TXC);
	
	/* Put data into buffer, sends the data */
	UDR = data;
 16a:	8c b9       	out	0x0c, r24	; 12
 16c:	08 95       	ret

0000016e <UART_Transmit_String>:
}


void UART_Transmit_String(u8 *str)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
	//Check the end of string
	while(*str != '\0')
 174:	88 81       	ld	r24, Y
 176:	88 23       	and	r24, r24
 178:	31 f0       	breq	.+12     	; 0x186 <UART_Transmit_String+0x18>
 17a:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_Transmit_Char(*(str++));
 17c:	0e 94 b3 00 	call	0x166	; 0x166 <UART_Transmit_Char>


void UART_Transmit_String(u8 *str)
{
	//Check the end of string
	while(*str != '\0')
 180:	89 91       	ld	r24, Y+
 182:	81 11       	cpse	r24, r1
 184:	fb cf       	rjmp	.-10     	; 0x17c <UART_Transmit_String+0xe>
	{
		UART_Transmit_Char(*(str++));
	}
}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <UART_Receive>:
		/* Wait for data to be received */
		while (!GET_BIT(UCSRA,RXC));
	#endif
	
	/* Get and return received data from buffer */
	return UDR;
 18c:	8c b1       	in	r24, 0x0c	; 12
}
 18e:	08 95       	ret

00000190 <USART_RXC_Callback>:
 * Any function passed to callback function will be
 * called in ISR
 */
void USART_RXC_Callback(void(*function_ptr) (void))
{
	G_USART_RXC = function_ptr ;
 190:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
 194:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
